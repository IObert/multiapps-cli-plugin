// This file was generated by counterfeiter
package fakes

import (
	"sync"

	slppclient "github.com/SAP/cf-mta-plugin/clients/slppclient"
	"github.com/SAP/cf-mta-plugin/commands"
)

type FakeAction struct {
	ExecuteStub        func(processID, commandName string, slppClient slppclient.SlppClientOperations) commands.ExecutionStatus
	executeMutex       sync.RWMutex
	executeArgsForCall []struct {
		processID   string
		commandName string
		slppClient  slppclient.SlppClientOperations
	}
	executeReturns struct {
		result1 commands.ExecutionStatus
	}
}

func (fake *FakeAction) Execute(processID string, commandName string, slppClient slppclient.SlppClientOperations) commands.ExecutionStatus {
	fake.executeMutex.Lock()
	fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
		processID   string
		commandName string
		slppClient  slppclient.SlppClientOperations
	}{processID, commandName, slppClient})
	fake.executeMutex.Unlock()
	if fake.ExecuteStub != nil {
		return fake.ExecuteStub(processID, commandName, slppClient)
	} else {
		return fake.executeReturns.result1
	}
}

func (fake *FakeAction) ExecuteCallCount() int {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return len(fake.executeArgsForCall)
}

func (fake *FakeAction) ExecuteArgsForCall(i int) (string, string, slppclient.SlppClientOperations) {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return fake.executeArgsForCall[i].processID, fake.executeArgsForCall[i].commandName, fake.executeArgsForCall[i].slppClient
}

func (fake *FakeAction) ExecuteReturns(result1 commands.ExecutionStatus) {
	fake.ExecuteStub = nil
	fake.executeReturns = struct {
		result1 commands.ExecutionStatus
	}{result1}
}

var _ commands.Action = new(FakeAction)
