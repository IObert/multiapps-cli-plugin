package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetOperationsParams creates a new GetOperationsParams object
// with the default values initialized.
func NewGetOperationsParams() *GetOperationsParams {
	var ()
	return &GetOperationsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetOperationsParamsWithTimeout creates a new GetOperationsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetOperationsParamsWithTimeout(timeout time.Duration) *GetOperationsParams {
	var ()
	return &GetOperationsParams{

		timeout: timeout,
	}
}

// NewGetOperationsParamsWithContext creates a new GetOperationsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetOperationsParamsWithContext(ctx context.Context) *GetOperationsParams {
	var ()
	return &GetOperationsParams{

		Context: ctx,
	}
}

/*GetOperationsParams contains all the parameters to send to the API endpoint
for the get operations operation typically these are written to a http.Request
*/
type GetOperationsParams struct {

	/*Last*/
	Last *string
	/*Status*/
	Status []string

	timeout time.Duration
	Context context.Context
}

// WithTimeout adds the timeout to the get operations params
func (o *GetOperationsParams) WithTimeout(timeout time.Duration) *GetOperationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get operations params
func (o *GetOperationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get operations params
func (o *GetOperationsParams) WithContext(ctx context.Context) *GetOperationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get operations params
func (o *GetOperationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithLast adds the last to the get operations params
func (o *GetOperationsParams) WithLast(last *string) *GetOperationsParams {
	o.SetLast(last)
	return o
}

// SetLast adds the last to the get operations params
func (o *GetOperationsParams) SetLast(last *string) {
	o.Last = last
}

// WithStatus adds the status to the get operations params
func (o *GetOperationsParams) WithStatus(status []string) *GetOperationsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get operations params
func (o *GetOperationsParams) SetStatus(status []string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *GetOperationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Last != nil {

		// query param last
		var qrLast string
		if o.Last != nil {
			qrLast = *o.Last
		}
		qLast := qrLast
		if qLast != "" {
			if err := r.SetQueryParam("last", qLast); err != nil {
				return err
			}
		}

	}

	valuesStatus := o.Status

	joinedStatus := swag.JoinByFormat(valuesStatus, "multi")
	// query array param status
	if err := r.SetQueryParam("status", joinedStatus...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
