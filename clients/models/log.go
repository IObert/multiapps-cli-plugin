package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/xml"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Log Log provides access to a single log. The actual content of the log is available through the content url
// swagger:model Log
type Log struct {
	XMLName xml.Name `xml:"http://www.sap.com/lmsl/slp Log"`

	// content
	// Required: true
	Content *strfmt.URI `xml:"content"`

	// description
	Description string `xml:"description,omitempty"`

	// display name
	DisplayName string `xml:"displayName,omitempty"`

	// external info
	ExternalInfo strfmt.URI `xml:"externalInfo,omitempty"`

	// format
	// Required: true
	Format *SlpLogFormat `xml:"format"`

	// id
	// Required: true
	ID *string `xml:"id"`

	// last modified
	LastModified SlpTimestamp `xml:"lastModified,omitempty"`

	// size
	Size int64 `xml:"size,omitempty"`
}

// Validate validates this log
func (m *Log) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFormat(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Log) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", m.Content); err != nil {
		return err
	}

	return nil
}

func (m *Log) validateFormat(formats strfmt.Registry) error {

	if err := validate.Required("format", "body", m.Format); err != nil {
		return err
	}

	if m.Format != nil {

		if err := m.Format.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Log) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}
