package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/xml"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Error Error element provides an error description
// swagger:model Error
type Error struct {
	XMLName xml.Name `xml:"http://www.sap.com/lmsl/slp Error"`

	// code
	// Required: true
	Code *string `xml:"code"`

	// description
	Description string `xml:"description,omitempty"`

	// display name
	// Required: true
	DisplayName *string `xml:"displayName"`

	// external info
	ExternalInfo strfmt.URI `xml:"externalInfo,omitempty"`

	// id
	// Required: true
	ID *string `xml:"id"`

	// logs
	Logs strfmt.URI `xml:"logs,omitempty"`

	// occurred at
	OccurredAt SlpTimestamp `xml:"occurredAt,omitempty"`
}

// Validate validates this error
func (m *Error) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Error) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *Error) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *Error) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}
