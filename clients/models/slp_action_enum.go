package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// SlpActionEnum Actions on the SL processes
// swagger:model slp_action_enum
type SlpActionEnum string

const (
	SlpActionEnumSlpActionSTOP   SlpActionEnum = "slp.action.STOP"
	SlpActionEnumSlpActionABORT  SlpActionEnum = "slp.action.ABORT"
	SlpActionEnumSlpActionRESUME SlpActionEnum = "slp.action.RESUME"
	SlpActionEnumSlpActionSUBMIT SlpActionEnum = "slp.action.SUBMIT"
	SlpActionEnumSlpActionREPEAT SlpActionEnum = "slp.action.REPEAT"
	SlpActionEnumSlpActionSTART  SlpActionEnum = "slp.action.START"
)

// for schema
var slpActionEnumEnum []interface{}

func (m SlpActionEnum) validateSlpActionEnumEnum(path, location string, value SlpActionEnum) error {
	if slpActionEnumEnum == nil {
		var res []SlpActionEnum
		if err := json.Unmarshal([]byte(`["slp.action.STOP","slp.action.ABORT","slp.action.RESUME","slp.action.SUBMIT","slp.action.REPEAT","slp.action.START"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			slpActionEnumEnum = append(slpActionEnumEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, slpActionEnumEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this slp action enum
func (m SlpActionEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSlpActionEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
