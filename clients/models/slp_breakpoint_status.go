package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// SlpBreakpointStatus Supported breakpoint statuses
// swagger:model slp_breakpoint_status
type SlpBreakpointStatus string

const (
	SlpBreakpointStatusSlpBreakpointStatusBEFORE SlpBreakpointStatus = "slp.breakpoint.status.BEFORE"
	SlpBreakpointStatusSlpBreakpointStatusAT     SlpBreakpointStatus = "slp.breakpoint.status.AT"
	SlpBreakpointStatusSlpBreakpointStatusAFTER  SlpBreakpointStatus = "slp.breakpoint.status.AFTER"
)

// for schema
var slpBreakpointStatusEnum []interface{}

func (m SlpBreakpointStatus) validateSlpBreakpointStatusEnum(path, location string, value SlpBreakpointStatus) error {
	if slpBreakpointStatusEnum == nil {
		var res []SlpBreakpointStatus
		if err := json.Unmarshal([]byte(`["slp.breakpoint.status.BEFORE","slp.breakpoint.status.AT","slp.breakpoint.status.AFTER"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			slpBreakpointStatusEnum = append(slpBreakpointStatusEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, slpBreakpointStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this slp breakpoint status
func (m SlpBreakpointStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSlpBreakpointStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
