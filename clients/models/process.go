package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/xml"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

type ProcessParameters struct {
	Parameters []*Parameter `xml:"Parameter,omitempty"`
}

type ProcessVersions struct {
	ComponentVersions []*ComponentVersion `xml:"ComponentVersion,omitempty"`
}

// Process SL Process which can be seen as an instance of a SL service
// swagger:model Process
type Process struct {
	XMLName xml.Name `xml:"http://www.sap.com/lmsl/slp Process"`

	// description
	Description string `xml:"description,omitempty"`

	// display name
	DisplayName string `xml:"displayName,omitempty"`

	// external info
	ExternalInfo strfmt.URI `xml:"externalInfo,omitempty"`

	// id
	ID string `xml:"id,omitempty"`

	// parameters
	// Required: true
	Parameters ProcessParameters `xml:"parameters,omitempty"`

	// root URL
	RootURL strfmt.URI `xml:"rootURL,omitempty"`

	// service
	// Required: true
	Service *strfmt.URI `xml:"service"`

	// status
	// Required: true
	Status SlpProcessState `xml:"status"`

	// versions
	Versions ProcessVersions `xml:"versions,omitempty"`
}

// Validate validates this process
func (m *Process) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParameters(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Process) validateParameters(formats strfmt.Registry) error {

	if err := validate.Required("parameters", "body", m.Parameters); err != nil {
		return err
	}

	for i := 0; i < len(m.Parameters.Parameters); i++ {

		if swag.IsZero(m.Parameters.Parameters[i]) { // not required
			continue
		}

		if m.Parameters.Parameters[i] != nil {

			if err := m.Parameters.Parameters[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Process) validateService(formats strfmt.Registry) error {

	if err := validate.Required("service", "body", m.Service); err != nil {
		return err
	}

	return nil
}

func (m *Process) validateStatus(formats strfmt.Registry) error {

	if err := m.Status.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *Process) validateVersions(formats strfmt.Registry) error {

	if swag.IsZero(m.Versions) { // not required
		return nil
	}

	for i := 0; i < len(m.Versions.ComponentVersions); i++ {

		if swag.IsZero(m.Versions.ComponentVersions[i]) { // not required
			continue
		}

		if m.Versions.ComponentVersions[i] != nil {

			if err := m.Versions.ComponentVersions[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
