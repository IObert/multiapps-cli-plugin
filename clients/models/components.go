package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/xml"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

type ComponentsMtas struct {
	Mtas []*Mta `xml:"mta,omitempty"`
}

type ComponentsStandaloneApps struct {
	StandaloneApps []string `xml:"standaloneApp,omitempty"`
}

// Components components
// swagger:model components
type Components struct {
	XMLName xml.Name `xml:"components"`

	// mtas
	// Required: true
	Mtas ComponentsMtas `json:"mtas" xml:"mtas"`

	// standalone apps
	// Required: true
	StandaloneApps ComponentsStandaloneApps `xml:"standaloneApps,omitempty"`
}

// Validate validates this components
func (m *Components) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMtas(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStandaloneApps(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Components) validateMtas(formats strfmt.Registry) error {

	if err := validate.Required("mtas", "body", m.Mtas); err != nil {
		return err
	}

	for i := 0; i < len(m.Mtas.Mtas); i++ {

		if swag.IsZero(m.Mtas.Mtas[i]) { // not required
			continue
		}

		if m.Mtas.Mtas[i] != nil {

			if err := m.Mtas.Mtas[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Components) validateStandaloneApps(formats strfmt.Registry) error {

	if err := validate.Required("standaloneApps", "body", m.StandaloneApps); err != nil {
		return err
	}

	return nil
}
