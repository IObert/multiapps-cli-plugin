package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// SlpLogFormatEnum Supported log formats
// swagger:model slp_log_format_enum
type SlpLogFormatEnum string

const (
	SlpLogFormatEnumSlpLogFormatTEXT SlpLogFormatEnum = "slp.log.format.TEXT"
	SlpLogFormatEnumSlpLogFormatHTML SlpLogFormatEnum = "slp.log.format.HTML"
	SlpLogFormatEnumSlpLogFormatGLF  SlpLogFormatEnum = "slp.log.format.GLF"
)

// for schema
var slpLogFormatEnumEnum []interface{}

func (m SlpLogFormatEnum) validateSlpLogFormatEnumEnum(path, location string, value SlpLogFormatEnum) error {
	if slpLogFormatEnumEnum == nil {
		var res []SlpLogFormatEnum
		if err := json.Unmarshal([]byte(`["slp.log.format.TEXT","slp.log.format.HTML","slp.log.format.GLF"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			slpLogFormatEnumEnum = append(slpLogFormatEnumEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, slpLogFormatEnumEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this slp log format enum
func (m SlpLogFormatEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSlpLogFormatEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
