package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// SlpTaskType Values allowed for task's type
// swagger:model slp_task_type
type SlpTaskType string

const (
	SlpTaskTypeSlpTaskTypePROCESS     SlpTaskType = "slp.task.type.PROCESS"
	SlpTaskTypeSlpTaskTypeROADMAPTECH SlpTaskType = "slp.task.type.ROADMAP.TECH"
	SlpTaskTypeSlpTaskTypeROADMAPUSER SlpTaskType = "slp.task.type.ROADMAP.USER"
	SlpTaskTypeSlpTaskTypeSTEP        SlpTaskType = "slp.task.type.STEP"
)

// for schema
var slpTaskTypeEnum []interface{}

func (m SlpTaskType) validateSlpTaskTypeEnum(path, location string, value SlpTaskType) error {
	if slpTaskTypeEnum == nil {
		var res []SlpTaskType
		if err := json.Unmarshal([]byte(`["slp.task.type.PROCESS","slp.task.type.ROADMAP.TECH","slp.task.type.ROADMAP.USER","slp.task.type.STEP"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			slpTaskTypeEnum = append(slpTaskTypeEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, slpTaskTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this slp task type
func (m SlpTaskType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSlpTaskTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
