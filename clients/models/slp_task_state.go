package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// SlpTaskState Values allowed for task's state
// swagger:model slp_task_state
type SlpTaskState string

const (
	SlpTaskStateSlpTaskStateINITIAL        SlpTaskState = "slp.task.state.INITIAL"
	SlpTaskStateSlpTaskStateRUNNING        SlpTaskState = "slp.task.state.RUNNING"
	SlpTaskStateSlpTaskStateERROR          SlpTaskState = "slp.task.state.ERROR"
	SlpTaskStateSlpTaskStateDIALOG         SlpTaskState = "slp.task.state.DIALOG"
	SlpTaskStateSlpTaskStateFINISHED       SlpTaskState = "slp.task.state.FINISHED"
	SlpTaskStateSlpTaskStateABORTED        SlpTaskState = "slp.task.state.ABORTED"
	SlpTaskStateSlpTaskStateSKIPPED        SlpTaskState = "slp.task.state.SKIPPED"
	SlpTaskStateSlpTaskStateACTIONREQUIRED SlpTaskState = "slp.task.state.ACTION_REQUIRED"
	SlpTaskStateSlpTaskStateBREAKPOINT     SlpTaskState = "slp.task.state.BREAKPOINT"
	SlpTaskStateSlpTaskStateSTOPPED        SlpTaskState = "slp.task.state.STOPPED"
)

// for schema
var slpTaskStateEnum []interface{}

func (m SlpTaskState) validateSlpTaskStateEnum(path, location string, value SlpTaskState) error {
	if slpTaskStateEnum == nil {
		var res []SlpTaskState
		if err := json.Unmarshal([]byte(`["slp.task.state.INITIAL","slp.task.state.RUNNING","slp.task.state.ERROR","slp.task.state.DIALOG","slp.task.state.FINISHED","slp.task.state.ABORTED","slp.task.state.SKIPPED","slp.task.state.ACTION_REQUIRED","slp.task.state.BREAKPOINT","slp.task.state.STOPPED"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			slpTaskStateEnum = append(slpTaskStateEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, slpTaskStateEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this slp task state
func (m SlpTaskState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSlpTaskStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
