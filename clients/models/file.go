package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/xml"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// File Files that could be used by a subsequent execution of a particular service
// swagger:model File
type File struct {
	XMLName xml.Name `xml:"http://www.sap.com/lmsl/slp File"`

	// digest
	Digest string `xml:"digest,omitempty"`

	// digest algorithm
	DigestAlgorithm string `xml:"digestAlgorithm,omitempty"`

	// file name
	// Required: true
	FileName *string `xml:"fileName"`

	// file path
	FilePath string `xml:"filePath,omitempty"`

	// file size
	FileSize int64 `xml:"fileSize,omitempty"`

	// id
	// Required: true
	ID *string `xml:"id"`

	// modification time
	ModificationTime SlpTimestamp `xml:"modificationTime,omitempty"`
}

// Validate validates this file
func (m *File) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *File) validateFileName(formats strfmt.Registry) error {

	if err := validate.Required("fileName", "body", m.FileName); err != nil {
		return err
	}

	return nil
}

func (m *File) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}
