package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/xml"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ComponentVersion Version element provides version information about a component participating in the implementation of a SL process
// swagger:model ComponentVersion
type ComponentVersion struct {
	XMLName xml.Name `xml:"http://www.sap.com/lmsl/slp ComponentVersion"`

	// component
	// Required: true
	Component *string `xml:"component"`

	// id
	// Required: true
	ID *string `xml:"id"`

	// version
	// Required: true
	Version *string `xml:"version"`
}

// Validate validates this component version
func (m *ComponentVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComponent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComponentVersion) validateComponent(formats strfmt.Registry) error {

	if err := validate.Required("component", "body", m.Component); err != nil {
		return err
	}

	return nil
}

func (m *ComponentVersion) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ComponentVersion) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}
