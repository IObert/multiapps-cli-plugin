package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/xml"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Action Action represents...
// swagger:model Action
type Action struct {
	XMLName xml.Name `xml:"http://www.sap.com/lmsl/slp Action"`

	// action type
	// Required: true
	ActionType *SlpAction `xml:"action_type"`

	// active
	Active bool `xml:"active,omitempty"`

	// description
	Description string `xml:"description,omitempty"`

	// display name
	DisplayName string `xml:"displayName,omitempty"`

	// external info
	ExternalInfo strfmt.URI `xml:"externalInfo,omitempty"`

	// id
	// Required: true
	ID *string `xml:"id"`

	// in dialog
	// Required: true
	InDialog *bool `xml:"inDialog"`
}

// Validate validates this action
func (m *Action) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInDialog(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Action) validateActionType(formats strfmt.Registry) error {

	if err := validate.Required("action_type", "body", m.ActionType); err != nil {
		return err
	}

	if m.ActionType != nil {

		if err := m.ActionType.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Action) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Action) validateInDialog(formats strfmt.Registry) error {

	if err := validate.Required("inDialog", "body", m.InDialog); err != nil {
		return err
	}

	return nil
}
