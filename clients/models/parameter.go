package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/xml"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

type ParameterParameters struct {
	Parameters []*Parameter `xml:"Parameter,omitempty"`
}

type ParameterTuples struct {
	Tuples []*Tuple `xml:"Tuple,omitempty"`
}

type ParameterValidationStatuses struct {
	ValidationStatuses []*ValidationStatus `xml:"ValidationStatus,omitempty"`
}

// Parameter Combination of definition and value in one element for easier usage
// swagger:model Parameter
type Parameter struct {
	XMLName xml.Name `xml:"http://www.sap.com/lmsl/slp Parameter"`

	// default
	Default string `xml:"default,omitempty"`

	// id
	// Required: true
	ID *string `xml:"id"`

	// required
	Required bool `xml:"required,omitempty"`

	// secure
	Secure bool `xml:"secure,omitempty"`

	// structure
	Structure ParameterParameters `xml:"structure,omitempty"`

	// tablevalue
	Tablevalue ParameterTuples `xml:"tablevalue,omitempty"`

	// tuplevalue
	Tuplevalue ParameterParameters `xml:"tuplevalue,omitempty"`

	// type
	Type SlpParameterType `xml:"type,omitempty"`

	// validation result
	ValidationResult ParameterValidationStatuses `xml:"validationResult,omitempty"`

	// value
	Value string `xml:"value,omitempty"`
}

// Validate validates this parameter
func (m *Parameter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStructure(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTablevalue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTuplevalue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateValidationResult(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Parameter) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Parameter) validateStructure(formats strfmt.Registry) error {

	if swag.IsZero(m.Structure) { // not required
		return nil
	}

	for i := 0; i < len(m.Structure.Parameters); i++ {

		if swag.IsZero(m.Structure.Parameters[i]) { // not required
			continue
		}

		if m.Structure.Parameters[i] != nil {

			if err := m.Structure.Parameters[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Parameter) validateTablevalue(formats strfmt.Registry) error {

	if swag.IsZero(m.Tablevalue) { // not required
		return nil
	}

	for i := 0; i < len(m.Tablevalue.Tuples); i++ {

		if swag.IsZero(m.Tablevalue.Tuples[i]) { // not required
			continue
		}

		if m.Tablevalue.Tuples[i] != nil {

			if err := m.Tablevalue.Tuples[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Parameter) validateTuplevalue(formats strfmt.Registry) error {

	if swag.IsZero(m.Tuplevalue) { // not required
		return nil
	}

	for i := 0; i < len(m.Tuplevalue.Parameters); i++ {

		if swag.IsZero(m.Tuplevalue.Parameters[i]) { // not required
			continue
		}

		if m.Tuplevalue.Parameters[i] != nil {

			if err := m.Tuplevalue.Parameters[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Parameter) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *Parameter) validateValidationResult(formats strfmt.Registry) error {

	if swag.IsZero(m.ValidationResult) { // not required
		return nil
	}

	for i := 0; i < len(m.ValidationResult.ValidationStatuses); i++ {

		if swag.IsZero(m.ValidationResult.ValidationStatuses[i]) { // not required
			continue
		}

		if m.ValidationResult.ValidationStatuses[i] != nil {

			if err := m.ValidationResult.ValidationStatuses[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
