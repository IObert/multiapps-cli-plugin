package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// SlpParameterType Defines the structural type of the parameter
// swagger:model slp_parameter_type
type SlpParameterType string

const (
	SlpParameterTypeSlpParameterTypeSCALAR SlpParameterType = "slp.parameter.type.SCALAR"
	SlpParameterTypeSlpParameterTypeTUPLE  SlpParameterType = "slp.parameter.type.TUPLE"
	SlpParameterTypeSlpParameterTypeTABLE  SlpParameterType = "slp.parameter.type.TABLE"
	SlpParameterTypeSlpParameterTypeFILE   SlpParameterType = "slp.parameter.type.FILE"
)

// for schema
var slpParameterTypeEnum []interface{}

func (m SlpParameterType) validateSlpParameterTypeEnum(path, location string, value SlpParameterType) error {
	if slpParameterTypeEnum == nil {
		var res []SlpParameterType
		if err := json.Unmarshal([]byte(`["slp.parameter.type.SCALAR","slp.parameter.type.TUPLE","slp.parameter.type.TABLE","slp.parameter.type.FILE"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			slpParameterTypeEnum = append(slpParameterTypeEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, slpParameterTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this slp parameter type
func (m SlpParameterType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSlpParameterTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
