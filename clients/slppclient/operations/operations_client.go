// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ExecuteAction Trigger the action specified by the proviced actionId (Mandatory)
*/
func (a *Client) ExecuteAction(params *ExecuteActionParams, authInfo runtime.ClientAuthInfoWriter) (*ExecuteActionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ExecuteAction",
		Method:             "POST",
		PathPattern:        "/actions/{actionId}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExecuteActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExecuteActionNoContent), nil

}

/*
GetAction get action API
*/
func (a *Client) GetAction(params *GetActionParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAction",
		Method:             "GET",
		PathPattern:        "/actions/{actionId}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetActionOK), nil

}

/*
GetActions All currently available actions. At least the 'ABORT' action must be supported by all SL process. Except of this the collection is dynamic and context dependent! (Mandatory)
*/
func (a *Client) GetActions(params *GetActionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetActions",
		Method:             "GET",
		PathPattern:        "/actions",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetActionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetActionsOK), nil

}

/*
GetError get error API
*/
func (a *Client) GetError(params *GetErrorParams, authInfo runtime.ClientAuthInfoWriter) (*GetErrorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetErrorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetError",
		Method:             "GET",
		PathPattern:        "/error",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetErrorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetErrorOK), nil

}

/*
GetLog get log API
*/
func (a *Client) GetLog(params *GetLogParams, authInfo runtime.ClientAuthInfoWriter) (*GetLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLog",
		Method:             "GET",
		PathPattern:        "/logs/{logId}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLogOK), nil

}

/*
GetLogContent get log content API
*/
func (a *Client) GetLogContent(params *GetLogContentParams, authInfo runtime.ClientAuthInfoWriter) (*GetLogContentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLogContentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLogContent",
		Method:             "GET",
		PathPattern:        "/logs/{logId}/content",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLogContentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLogContentOK), nil

}

/*
GetLogs All logs of the process instance
*/
func (a *Client) GetLogs(params *GetLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLogs",
		Method:             "GET",
		PathPattern:        "/logs",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLogsOK), nil

}

/*
GetMetadata Metadata, relevant to this SL process (Mandatory)
*/
func (a *Client) GetMetadata(params *GetMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*GetMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMetadata",
		Method:             "GET",
		PathPattern:        "/metadata",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMetadataOK), nil

}

/*
GetTasklist Complete list of the tasks of the running process with actual runtime information in the correct order
*/
func (a *Client) GetTasklist(params *GetTasklistParams, authInfo runtime.ClientAuthInfoWriter) (*GetTasklistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTasklistParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTasklist",
		Method:             "GET",
		PathPattern:        "/tasklist",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTasklistReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTasklistOK), nil

}

/*
GetTasklistTask get tasklist task API
*/
func (a *Client) GetTasklistTask(params *GetTasklistTaskParams, authInfo runtime.ClientAuthInfoWriter) (*GetTasklistTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTasklistTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTasklistTask",
		Method:             "GET",
		PathPattern:        "/tasklist/{taskId}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTasklistTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTasklistTaskOK), nil

}

/*
GetTasklistTaskError get tasklist task error API
*/
func (a *Client) GetTasklistTaskError(params *GetTasklistTaskErrorParams, authInfo runtime.ClientAuthInfoWriter) (*GetTasklistTaskErrorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTasklistTaskErrorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTasklistTaskError",
		Method:             "GET",
		PathPattern:        "/tasklist/{taskId}/error",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTasklistTaskErrorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTasklistTaskErrorOK), nil

}

/*
GetTasklistTaskLogs get tasklist task logs API
*/
func (a *Client) GetTasklistTaskLogs(params *GetTasklistTaskLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetTasklistTaskLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTasklistTaskLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTasklistTaskLogs",
		Method:             "GET",
		PathPattern:        "/tasklist/{taskId}/logs",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTasklistTaskLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTasklistTaskLogsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
