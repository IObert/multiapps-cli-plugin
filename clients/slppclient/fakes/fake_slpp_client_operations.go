// This file was generated by counterfeiter
package fakes

import (
	"sync"

	models "github.com/SAP/cf-mta-plugin/clients/models"
	slppclient "github.com/SAP/cf-mta-plugin/clients/slppclient"
)

type FakeSlppClientOperations struct {
	GetMetadataStub        func() (*models.Metadata, error)
	getMetadataMutex       sync.RWMutex
	getMetadataArgsForCall []struct{}
	getMetadataReturns     struct {
		result1 *models.Metadata
		result2 error
	}
	GetLogsStub        func() (models.Logs, error)
	getLogsMutex       sync.RWMutex
	getLogsArgsForCall []struct{}
	getLogsReturns     struct {
		result1 models.Logs
		result2 error
	}
	GetLogContentStub        func(logID string) (string, error)
	getLogContentMutex       sync.RWMutex
	getLogContentArgsForCall []struct {
		logID string
	}
	getLogContentReturns struct {
		result1 string
		result2 error
	}
	GetTasklistStub        func() (models.Tasklist, error)
	getTasklistMutex       sync.RWMutex
	getTasklistArgsForCall []struct{}
	getTasklistReturns     struct {
		result1 models.Tasklist
		result2 error
	}
	GetTasklistTaskStub        func(serviceID string) (*models.Task, error)
	getTasklistTaskMutex       sync.RWMutex
	getTasklistTaskArgsForCall []struct{}
	getTasklistTaskReturns     struct {
		result1 *models.Task
		result2 error
	}
	GetServiceIDStub        func() string
	getServiceIDMutex       sync.RWMutex
	getServiceIDArgsForCall []struct{}
	getServiceIDReturns     struct {
		result1 string
	}
	GetErrorStub        func() (*models.Error, error)
	getErrorMutex       sync.RWMutex
	getErrorArgsForCall []struct{}
	getErrorReturns     struct {
		result1 *models.Error
		result2 error
	}
	ExecuteActionStub        func(actionID string) error
	executeActionMutex       sync.RWMutex
	executeActionArgsForCall []struct {
		actionID string
	}
	executeActionReturns struct {
		result1 error
	}
	GetActionsStub        func() (models.Actions, error)
	getActionsMutex       sync.RWMutex
	getActionsArgsForCall []struct{}
	getActionsReturns     struct {
		result1 models.Actions
		result2 error
	}
}

func (fake *FakeSlppClientOperations) GetMetadata() (*models.Metadata, error) {
	fake.getMetadataMutex.Lock()
	fake.getMetadataArgsForCall = append(fake.getMetadataArgsForCall, struct{}{})
	fake.getMetadataMutex.Unlock()
	if fake.GetMetadataStub != nil {
		return fake.GetMetadataStub()
	} else {
		return fake.getMetadataReturns.result1, fake.getMetadataReturns.result2
	}
}

func (fake *FakeSlppClientOperations) GetMetadataCallCount() int {
	fake.getMetadataMutex.RLock()
	defer fake.getMetadataMutex.RUnlock()
	return len(fake.getMetadataArgsForCall)
}

func (fake *FakeSlppClientOperations) GetMetadataReturns(result1 *models.Metadata, result2 error) {
	fake.GetMetadataStub = nil
	fake.getMetadataReturns = struct {
		result1 *models.Metadata
		result2 error
	}{result1, result2}
}

func (fake *FakeSlppClientOperations) GetLogs() (models.Logs, error) {
	fake.getLogsMutex.Lock()
	fake.getLogsArgsForCall = append(fake.getLogsArgsForCall, struct{}{})
	fake.getLogsMutex.Unlock()
	if fake.GetLogsStub != nil {
		return fake.GetLogsStub()
	} else {
		return fake.getLogsReturns.result1, fake.getLogsReturns.result2
	}
}

func (fake *FakeSlppClientOperations) GetLogsCallCount() int {
	fake.getLogsMutex.RLock()
	defer fake.getLogsMutex.RUnlock()
	return len(fake.getLogsArgsForCall)
}

func (fake *FakeSlppClientOperations) GetLogsReturns(result1 models.Logs, result2 error) {
	fake.GetLogsStub = nil
	fake.getLogsReturns = struct {
		result1 models.Logs
		result2 error
	}{result1, result2}
}

func (fake *FakeSlppClientOperations) GetLogContent(logID string) (string, error) {
	fake.getLogContentMutex.Lock()
	fake.getLogContentArgsForCall = append(fake.getLogContentArgsForCall, struct {
		logID string
	}{logID})
	fake.getLogContentMutex.Unlock()
	if fake.GetLogContentStub != nil {
		return fake.GetLogContentStub(logID)
	} else {
		return fake.getLogContentReturns.result1, fake.getLogContentReturns.result2
	}
}

func (fake *FakeSlppClientOperations) GetLogContentCallCount() int {
	fake.getLogContentMutex.RLock()
	defer fake.getLogContentMutex.RUnlock()
	return len(fake.getLogContentArgsForCall)
}

func (fake *FakeSlppClientOperations) GetLogContentArgsForCall(i int) string {
	fake.getLogContentMutex.RLock()
	defer fake.getLogContentMutex.RUnlock()
	return fake.getLogContentArgsForCall[i].logID
}

func (fake *FakeSlppClientOperations) GetLogContentReturns(result1 string, result2 error) {
	fake.GetLogContentStub = nil
	fake.getLogContentReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeSlppClientOperations) GetTasklist() (models.Tasklist, error) {
	fake.getTasklistMutex.Lock()
	fake.getTasklistArgsForCall = append(fake.getTasklistArgsForCall, struct{}{})
	fake.getTasklistMutex.Unlock()
	if fake.GetTasklistStub != nil {
		return fake.GetTasklistStub()
	} else {
		return fake.getTasklistReturns.result1, fake.getTasklistReturns.result2
	}
}

func (fake *FakeSlppClientOperations) GetTasklistCallCount() int {
	fake.getTasklistMutex.RLock()
	defer fake.getTasklistMutex.RUnlock()
	return len(fake.getTasklistArgsForCall)
}

func (fake *FakeSlppClientOperations) GetTasklistReturns(result1 models.Tasklist, result2 error) {
	fake.GetTasklistStub = nil
	fake.getTasklistReturns = struct {
		result1 models.Tasklist
		result2 error
	}{result1, result2}
}

func (fake *FakeSlppClientOperations) GetTasklistTask(serviceID string) (*models.Task, error) {
	fake.getTasklistTaskMutex.Lock()
	fake.getTasklistTaskArgsForCall = append(fake.getTasklistTaskArgsForCall, struct{}{})
	fake.getTasklistTaskMutex.Unlock()
	if fake.GetTasklistTaskStub != nil {
		return fake.GetTasklistTaskStub(serviceID)
	} else {
		return fake.getTasklistTaskReturns.result1, fake.getTasklistTaskReturns.result2
	}
}

func (fake *FakeSlppClientOperations) GetTasklistTaskCallCount() int {
	fake.getTasklistTaskMutex.RLock()
	defer fake.getTasklistTaskMutex.RUnlock()
	return len(fake.getTasklistTaskArgsForCall)
}

func (fake *FakeSlppClientOperations) GetTasklistTaskReturns(result1 *models.Task, result2 error) {
	fake.GetTasklistTaskStub = nil
	fake.getTasklistTaskReturns = struct {
		result1 *models.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeSlppClientOperations) GetServiceID() string {
	fake.getServiceIDMutex.Lock()
	fake.getServiceIDArgsForCall = append(fake.getServiceIDArgsForCall, struct{}{})
	fake.getServiceIDMutex.Unlock()
	if fake.GetServiceIDStub != nil {
		return fake.GetServiceIDStub()
	} else {
		return fake.getServiceIDReturns.result1
	}
}

func (fake *FakeSlppClientOperations) GetServiceIDCallCount() int {
	fake.getServiceIDMutex.RLock()
	defer fake.getServiceIDMutex.RUnlock()
	return len(fake.getServiceIDArgsForCall)
}

func (fake *FakeSlppClientOperations) GetServiceIDReturns(result1 string) {
	fake.GetServiceIDStub = nil
	fake.getServiceIDReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeSlppClientOperations) GetError() (*models.Error, error) {
	fake.getErrorMutex.Lock()
	fake.getErrorArgsForCall = append(fake.getErrorArgsForCall, struct{}{})
	fake.getErrorMutex.Unlock()
	if fake.GetErrorStub != nil {
		return fake.GetErrorStub()
	} else {
		return fake.getErrorReturns.result1, fake.getErrorReturns.result2
	}
}

func (fake *FakeSlppClientOperations) GetErrorCallCount() int {
	fake.getErrorMutex.RLock()
	defer fake.getErrorMutex.RUnlock()
	return len(fake.getErrorArgsForCall)
}

func (fake *FakeSlppClientOperations) GetErrorReturns(result1 *models.Error, result2 error) {
	fake.GetErrorStub = nil
	fake.getErrorReturns = struct {
		result1 *models.Error
		result2 error
	}{result1, result2}
}

func (fake *FakeSlppClientOperations) ExecuteAction(actionID string) error {
	fake.executeActionMutex.Lock()
	fake.executeActionArgsForCall = append(fake.executeActionArgsForCall, struct {
		actionID string
	}{actionID})
	fake.executeActionMutex.Unlock()
	if fake.ExecuteActionStub != nil {
		return fake.ExecuteActionStub(actionID)
	} else {
		return fake.executeActionReturns.result1
	}
}

func (fake *FakeSlppClientOperations) ExecuteActionCallCount() int {
	fake.executeActionMutex.RLock()
	defer fake.executeActionMutex.RUnlock()
	return len(fake.executeActionArgsForCall)
}

func (fake *FakeSlppClientOperations) ExecuteActionArgsForCall(i int) string {
	fake.executeActionMutex.RLock()
	defer fake.executeActionMutex.RUnlock()
	return fake.executeActionArgsForCall[i].actionID
}

func (fake *FakeSlppClientOperations) ExecuteActionReturns(result1 error) {
	fake.ExecuteActionStub = nil
	fake.executeActionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSlppClientOperations) GetActions() (models.Actions, error) {
	fake.getActionsMutex.Lock()
	fake.getActionsArgsForCall = append(fake.getActionsArgsForCall, struct{}{})
	fake.getActionsMutex.Unlock()
	if fake.GetActionsStub != nil {
		return fake.GetActionsStub()
	} else {
		return fake.getActionsReturns.result1, fake.getActionsReturns.result2
	}
}

func (fake *FakeSlppClientOperations) GetActionsCallCount() int {
	fake.getActionsMutex.RLock()
	defer fake.getActionsMutex.RUnlock()
	return len(fake.getActionsArgsForCall)
}

func (fake *FakeSlppClientOperations) GetActionsReturns(result1 models.Actions, result2 error) {
	fake.GetActionsStub = nil
	fake.getActionsReturns = struct {
		result1 models.Actions
		result2 error
	}{result1, result2}
}

var _ slppclient.SlppClientOperations = new(FakeSlppClientOperations)
