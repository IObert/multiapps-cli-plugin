// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"os"
	"sync"

	models "github.com/SAP/cf-mta-plugin/clients/models"
	slmpclient "github.com/SAP/cf-mta-plugin/clients/slmpclient"
)

type FakeSlmpClientOperations struct {
	GetMetadataStub        func() (*models.Metadata, error)
	getMetadataMutex       sync.RWMutex
	getMetadataArgsForCall []struct{}
	getMetadataReturns     struct {
		result1 *models.Metadata
		result2 error
	}
	getMetadataReturnsOnCall map[int]struct {
		result1 *models.Metadata
		result2 error
	}
	GetServicesStub        func() (models.Services, error)
	getServicesMutex       sync.RWMutex
	getServicesArgsForCall []struct{}
	getServicesReturns     struct {
		result1 models.Services
		result2 error
	}
	getServicesReturnsOnCall map[int]struct {
		result1 models.Services
		result2 error
	}
	GetServiceStub        func(serviceID string) (*models.Service, error)
	getServiceMutex       sync.RWMutex
	getServiceArgsForCall []struct {
		serviceID string
	}
	getServiceReturns struct {
		result1 *models.Service
		result2 error
	}
	getServiceReturnsOnCall map[int]struct {
		result1 *models.Service
		result2 error
	}
	GetServiceProcessesStub        func(serviceID string) (models.Processes, error)
	getServiceProcessesMutex       sync.RWMutex
	getServiceProcessesArgsForCall []struct {
		serviceID string
	}
	getServiceProcessesReturns struct {
		result1 models.Processes
		result2 error
	}
	getServiceProcessesReturnsOnCall map[int]struct {
		result1 models.Processes
		result2 error
	}
	GetServiceFilesStub        func(serviceID string) (models.Files, error)
	getServiceFilesMutex       sync.RWMutex
	getServiceFilesArgsForCall []struct {
		serviceID string
	}
	getServiceFilesReturns struct {
		result1 models.Files
		result2 error
	}
	getServiceFilesReturnsOnCall map[int]struct {
		result1 models.Files
		result2 error
	}
	CreateServiceFileStub        func(serviceID string, file os.File) (models.Files, error)
	createServiceFileMutex       sync.RWMutex
	createServiceFileArgsForCall []struct {
		serviceID string
		file      os.File
	}
	createServiceFileReturns struct {
		result1 models.Files
		result2 error
	}
	createServiceFileReturnsOnCall map[int]struct {
		result1 models.Files
		result2 error
	}
	CreateServiceProcessStub        func(serviceID string, process *models.Process) (*models.Process, error)
	createServiceProcessMutex       sync.RWMutex
	createServiceProcessArgsForCall []struct {
		serviceID string
		process   *models.Process
	}
	createServiceProcessReturns struct {
		result1 *models.Process
		result2 error
	}
	createServiceProcessReturnsOnCall map[int]struct {
		result1 *models.Process
		result2 error
	}
	GetServiceVersionsStub        func(serviceID string) (models.Versions, error)
	getServiceVersionsMutex       sync.RWMutex
	getServiceVersionsArgsForCall []struct {
		serviceID string
	}
	getServiceVersionsReturns struct {
		result1 models.Versions
		result2 error
	}
	getServiceVersionsReturnsOnCall map[int]struct {
		result1 models.Versions
		result2 error
	}
	GetProcessStub        func(processID string) (*models.Process, error)
	getProcessMutex       sync.RWMutex
	getProcessArgsForCall []struct {
		processID string
	}
	getProcessReturns struct {
		result1 *models.Process
		result2 error
	}
	getProcessReturnsOnCall map[int]struct {
		result1 *models.Process
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSlmpClientOperations) GetMetadata() (*models.Metadata, error) {
	fake.getMetadataMutex.Lock()
	ret, specificReturn := fake.getMetadataReturnsOnCall[len(fake.getMetadataArgsForCall)]
	fake.getMetadataArgsForCall = append(fake.getMetadataArgsForCall, struct{}{})
	fake.recordInvocation("GetMetadata", []interface{}{})
	fake.getMetadataMutex.Unlock()
	if fake.GetMetadataStub != nil {
		return fake.GetMetadataStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getMetadataReturns.result1, fake.getMetadataReturns.result2
}

func (fake *FakeSlmpClientOperations) GetMetadataCallCount() int {
	fake.getMetadataMutex.RLock()
	defer fake.getMetadataMutex.RUnlock()
	return len(fake.getMetadataArgsForCall)
}

func (fake *FakeSlmpClientOperations) GetMetadataReturns(result1 *models.Metadata, result2 error) {
	fake.GetMetadataStub = nil
	fake.getMetadataReturns = struct {
		result1 *models.Metadata
		result2 error
	}{result1, result2}
}

func (fake *FakeSlmpClientOperations) GetMetadataReturnsOnCall(i int, result1 *models.Metadata, result2 error) {
	fake.GetMetadataStub = nil
	if fake.getMetadataReturnsOnCall == nil {
		fake.getMetadataReturnsOnCall = make(map[int]struct {
			result1 *models.Metadata
			result2 error
		})
	}
	fake.getMetadataReturnsOnCall[i] = struct {
		result1 *models.Metadata
		result2 error
	}{result1, result2}
}

func (fake *FakeSlmpClientOperations) GetServices() (models.Services, error) {
	fake.getServicesMutex.Lock()
	ret, specificReturn := fake.getServicesReturnsOnCall[len(fake.getServicesArgsForCall)]
	fake.getServicesArgsForCall = append(fake.getServicesArgsForCall, struct{}{})
	fake.recordInvocation("GetServices", []interface{}{})
	fake.getServicesMutex.Unlock()
	if fake.GetServicesStub != nil {
		return fake.GetServicesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getServicesReturns.result1, fake.getServicesReturns.result2
}

func (fake *FakeSlmpClientOperations) GetServicesCallCount() int {
	fake.getServicesMutex.RLock()
	defer fake.getServicesMutex.RUnlock()
	return len(fake.getServicesArgsForCall)
}

func (fake *FakeSlmpClientOperations) GetServicesReturns(result1 models.Services, result2 error) {
	fake.GetServicesStub = nil
	fake.getServicesReturns = struct {
		result1 models.Services
		result2 error
	}{result1, result2}
}

func (fake *FakeSlmpClientOperations) GetServicesReturnsOnCall(i int, result1 models.Services, result2 error) {
	fake.GetServicesStub = nil
	if fake.getServicesReturnsOnCall == nil {
		fake.getServicesReturnsOnCall = make(map[int]struct {
			result1 models.Services
			result2 error
		})
	}
	fake.getServicesReturnsOnCall[i] = struct {
		result1 models.Services
		result2 error
	}{result1, result2}
}

func (fake *FakeSlmpClientOperations) GetService(serviceID string) (*models.Service, error) {
	fake.getServiceMutex.Lock()
	ret, specificReturn := fake.getServiceReturnsOnCall[len(fake.getServiceArgsForCall)]
	fake.getServiceArgsForCall = append(fake.getServiceArgsForCall, struct {
		serviceID string
	}{serviceID})
	fake.recordInvocation("GetService", []interface{}{serviceID})
	fake.getServiceMutex.Unlock()
	if fake.GetServiceStub != nil {
		return fake.GetServiceStub(serviceID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getServiceReturns.result1, fake.getServiceReturns.result2
}

func (fake *FakeSlmpClientOperations) GetServiceCallCount() int {
	fake.getServiceMutex.RLock()
	defer fake.getServiceMutex.RUnlock()
	return len(fake.getServiceArgsForCall)
}

func (fake *FakeSlmpClientOperations) GetServiceArgsForCall(i int) string {
	fake.getServiceMutex.RLock()
	defer fake.getServiceMutex.RUnlock()
	return fake.getServiceArgsForCall[i].serviceID
}

func (fake *FakeSlmpClientOperations) GetServiceReturns(result1 *models.Service, result2 error) {
	fake.GetServiceStub = nil
	fake.getServiceReturns = struct {
		result1 *models.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeSlmpClientOperations) GetServiceReturnsOnCall(i int, result1 *models.Service, result2 error) {
	fake.GetServiceStub = nil
	if fake.getServiceReturnsOnCall == nil {
		fake.getServiceReturnsOnCall = make(map[int]struct {
			result1 *models.Service
			result2 error
		})
	}
	fake.getServiceReturnsOnCall[i] = struct {
		result1 *models.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeSlmpClientOperations) GetServiceProcesses(serviceID string) (models.Processes, error) {
	fake.getServiceProcessesMutex.Lock()
	ret, specificReturn := fake.getServiceProcessesReturnsOnCall[len(fake.getServiceProcessesArgsForCall)]
	fake.getServiceProcessesArgsForCall = append(fake.getServiceProcessesArgsForCall, struct {
		serviceID string
	}{serviceID})
	fake.recordInvocation("GetServiceProcesses", []interface{}{serviceID})
	fake.getServiceProcessesMutex.Unlock()
	if fake.GetServiceProcessesStub != nil {
		return fake.GetServiceProcessesStub(serviceID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getServiceProcessesReturns.result1, fake.getServiceProcessesReturns.result2
}

func (fake *FakeSlmpClientOperations) GetServiceProcessesCallCount() int {
	fake.getServiceProcessesMutex.RLock()
	defer fake.getServiceProcessesMutex.RUnlock()
	return len(fake.getServiceProcessesArgsForCall)
}

func (fake *FakeSlmpClientOperations) GetServiceProcessesArgsForCall(i int) string {
	fake.getServiceProcessesMutex.RLock()
	defer fake.getServiceProcessesMutex.RUnlock()
	return fake.getServiceProcessesArgsForCall[i].serviceID
}

func (fake *FakeSlmpClientOperations) GetServiceProcessesReturns(result1 models.Processes, result2 error) {
	fake.GetServiceProcessesStub = nil
	fake.getServiceProcessesReturns = struct {
		result1 models.Processes
		result2 error
	}{result1, result2}
}

func (fake *FakeSlmpClientOperations) GetServiceProcessesReturnsOnCall(i int, result1 models.Processes, result2 error) {
	fake.GetServiceProcessesStub = nil
	if fake.getServiceProcessesReturnsOnCall == nil {
		fake.getServiceProcessesReturnsOnCall = make(map[int]struct {
			result1 models.Processes
			result2 error
		})
	}
	fake.getServiceProcessesReturnsOnCall[i] = struct {
		result1 models.Processes
		result2 error
	}{result1, result2}
}

func (fake *FakeSlmpClientOperations) GetServiceFiles(serviceID string) (models.Files, error) {
	fake.getServiceFilesMutex.Lock()
	ret, specificReturn := fake.getServiceFilesReturnsOnCall[len(fake.getServiceFilesArgsForCall)]
	fake.getServiceFilesArgsForCall = append(fake.getServiceFilesArgsForCall, struct {
		serviceID string
	}{serviceID})
	fake.recordInvocation("GetServiceFiles", []interface{}{serviceID})
	fake.getServiceFilesMutex.Unlock()
	if fake.GetServiceFilesStub != nil {
		return fake.GetServiceFilesStub(serviceID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getServiceFilesReturns.result1, fake.getServiceFilesReturns.result2
}

func (fake *FakeSlmpClientOperations) GetServiceFilesCallCount() int {
	fake.getServiceFilesMutex.RLock()
	defer fake.getServiceFilesMutex.RUnlock()
	return len(fake.getServiceFilesArgsForCall)
}

func (fake *FakeSlmpClientOperations) GetServiceFilesArgsForCall(i int) string {
	fake.getServiceFilesMutex.RLock()
	defer fake.getServiceFilesMutex.RUnlock()
	return fake.getServiceFilesArgsForCall[i].serviceID
}

func (fake *FakeSlmpClientOperations) GetServiceFilesReturns(result1 models.Files, result2 error) {
	fake.GetServiceFilesStub = nil
	fake.getServiceFilesReturns = struct {
		result1 models.Files
		result2 error
	}{result1, result2}
}

func (fake *FakeSlmpClientOperations) GetServiceFilesReturnsOnCall(i int, result1 models.Files, result2 error) {
	fake.GetServiceFilesStub = nil
	if fake.getServiceFilesReturnsOnCall == nil {
		fake.getServiceFilesReturnsOnCall = make(map[int]struct {
			result1 models.Files
			result2 error
		})
	}
	fake.getServiceFilesReturnsOnCall[i] = struct {
		result1 models.Files
		result2 error
	}{result1, result2}
}

func (fake *FakeSlmpClientOperations) CreateServiceFile(serviceID string, file os.File) (models.Files, error) {
	fake.createServiceFileMutex.Lock()
	ret, specificReturn := fake.createServiceFileReturnsOnCall[len(fake.createServiceFileArgsForCall)]
	fake.createServiceFileArgsForCall = append(fake.createServiceFileArgsForCall, struct {
		serviceID string
		file      os.File
	}{serviceID, file})
	fake.recordInvocation("CreateServiceFile", []interface{}{serviceID, file})
	fake.createServiceFileMutex.Unlock()
	if fake.CreateServiceFileStub != nil {
		return fake.CreateServiceFileStub(serviceID, file)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createServiceFileReturns.result1, fake.createServiceFileReturns.result2
}

func (fake *FakeSlmpClientOperations) CreateServiceFileCallCount() int {
	fake.createServiceFileMutex.RLock()
	defer fake.createServiceFileMutex.RUnlock()
	return len(fake.createServiceFileArgsForCall)
}

func (fake *FakeSlmpClientOperations) CreateServiceFileArgsForCall(i int) (string, os.File) {
	fake.createServiceFileMutex.RLock()
	defer fake.createServiceFileMutex.RUnlock()
	return fake.createServiceFileArgsForCall[i].serviceID, fake.createServiceFileArgsForCall[i].file
}

func (fake *FakeSlmpClientOperations) CreateServiceFileReturns(result1 models.Files, result2 error) {
	fake.CreateServiceFileStub = nil
	fake.createServiceFileReturns = struct {
		result1 models.Files
		result2 error
	}{result1, result2}
}

func (fake *FakeSlmpClientOperations) CreateServiceFileReturnsOnCall(i int, result1 models.Files, result2 error) {
	fake.CreateServiceFileStub = nil
	if fake.createServiceFileReturnsOnCall == nil {
		fake.createServiceFileReturnsOnCall = make(map[int]struct {
			result1 models.Files
			result2 error
		})
	}
	fake.createServiceFileReturnsOnCall[i] = struct {
		result1 models.Files
		result2 error
	}{result1, result2}
}

func (fake *FakeSlmpClientOperations) CreateServiceProcess(serviceID string, process *models.Process) (*models.Process, error) {
	fake.createServiceProcessMutex.Lock()
	ret, specificReturn := fake.createServiceProcessReturnsOnCall[len(fake.createServiceProcessArgsForCall)]
	fake.createServiceProcessArgsForCall = append(fake.createServiceProcessArgsForCall, struct {
		serviceID string
		process   *models.Process
	}{serviceID, process})
	fake.recordInvocation("CreateServiceProcess", []interface{}{serviceID, process})
	fake.createServiceProcessMutex.Unlock()
	if fake.CreateServiceProcessStub != nil {
		return fake.CreateServiceProcessStub(serviceID, process)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createServiceProcessReturns.result1, fake.createServiceProcessReturns.result2
}

func (fake *FakeSlmpClientOperations) CreateServiceProcessCallCount() int {
	fake.createServiceProcessMutex.RLock()
	defer fake.createServiceProcessMutex.RUnlock()
	return len(fake.createServiceProcessArgsForCall)
}

func (fake *FakeSlmpClientOperations) CreateServiceProcessArgsForCall(i int) (string, *models.Process) {
	fake.createServiceProcessMutex.RLock()
	defer fake.createServiceProcessMutex.RUnlock()
	return fake.createServiceProcessArgsForCall[i].serviceID, fake.createServiceProcessArgsForCall[i].process
}

func (fake *FakeSlmpClientOperations) CreateServiceProcessReturns(result1 *models.Process, result2 error) {
	fake.CreateServiceProcessStub = nil
	fake.createServiceProcessReturns = struct {
		result1 *models.Process
		result2 error
	}{result1, result2}
}

func (fake *FakeSlmpClientOperations) CreateServiceProcessReturnsOnCall(i int, result1 *models.Process, result2 error) {
	fake.CreateServiceProcessStub = nil
	if fake.createServiceProcessReturnsOnCall == nil {
		fake.createServiceProcessReturnsOnCall = make(map[int]struct {
			result1 *models.Process
			result2 error
		})
	}
	fake.createServiceProcessReturnsOnCall[i] = struct {
		result1 *models.Process
		result2 error
	}{result1, result2}
}

func (fake *FakeSlmpClientOperations) GetServiceVersions(serviceID string) (models.Versions, error) {
	fake.getServiceVersionsMutex.Lock()
	ret, specificReturn := fake.getServiceVersionsReturnsOnCall[len(fake.getServiceVersionsArgsForCall)]
	fake.getServiceVersionsArgsForCall = append(fake.getServiceVersionsArgsForCall, struct {
		serviceID string
	}{serviceID})
	fake.recordInvocation("GetServiceVersions", []interface{}{serviceID})
	fake.getServiceVersionsMutex.Unlock()
	if fake.GetServiceVersionsStub != nil {
		return fake.GetServiceVersionsStub(serviceID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getServiceVersionsReturns.result1, fake.getServiceVersionsReturns.result2
}

func (fake *FakeSlmpClientOperations) GetServiceVersionsCallCount() int {
	fake.getServiceVersionsMutex.RLock()
	defer fake.getServiceVersionsMutex.RUnlock()
	return len(fake.getServiceVersionsArgsForCall)
}

func (fake *FakeSlmpClientOperations) GetServiceVersionsArgsForCall(i int) string {
	fake.getServiceVersionsMutex.RLock()
	defer fake.getServiceVersionsMutex.RUnlock()
	return fake.getServiceVersionsArgsForCall[i].serviceID
}

func (fake *FakeSlmpClientOperations) GetServiceVersionsReturns(result1 models.Versions, result2 error) {
	fake.GetServiceVersionsStub = nil
	fake.getServiceVersionsReturns = struct {
		result1 models.Versions
		result2 error
	}{result1, result2}
}

func (fake *FakeSlmpClientOperations) GetServiceVersionsReturnsOnCall(i int, result1 models.Versions, result2 error) {
	fake.GetServiceVersionsStub = nil
	if fake.getServiceVersionsReturnsOnCall == nil {
		fake.getServiceVersionsReturnsOnCall = make(map[int]struct {
			result1 models.Versions
			result2 error
		})
	}
	fake.getServiceVersionsReturnsOnCall[i] = struct {
		result1 models.Versions
		result2 error
	}{result1, result2}
}

func (fake *FakeSlmpClientOperations) GetProcess(processID string) (*models.Process, error) {
	fake.getProcessMutex.Lock()
	ret, specificReturn := fake.getProcessReturnsOnCall[len(fake.getProcessArgsForCall)]
	fake.getProcessArgsForCall = append(fake.getProcessArgsForCall, struct {
		processID string
	}{processID})
	fake.recordInvocation("GetProcess", []interface{}{processID})
	fake.getProcessMutex.Unlock()
	if fake.GetProcessStub != nil {
		return fake.GetProcessStub(processID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getProcessReturns.result1, fake.getProcessReturns.result2
}

func (fake *FakeSlmpClientOperations) GetProcessCallCount() int {
	fake.getProcessMutex.RLock()
	defer fake.getProcessMutex.RUnlock()
	return len(fake.getProcessArgsForCall)
}

func (fake *FakeSlmpClientOperations) GetProcessArgsForCall(i int) string {
	fake.getProcessMutex.RLock()
	defer fake.getProcessMutex.RUnlock()
	return fake.getProcessArgsForCall[i].processID
}

func (fake *FakeSlmpClientOperations) GetProcessReturns(result1 *models.Process, result2 error) {
	fake.GetProcessStub = nil
	fake.getProcessReturns = struct {
		result1 *models.Process
		result2 error
	}{result1, result2}
}

func (fake *FakeSlmpClientOperations) GetProcessReturnsOnCall(i int, result1 *models.Process, result2 error) {
	fake.GetProcessStub = nil
	if fake.getProcessReturnsOnCall == nil {
		fake.getProcessReturnsOnCall = make(map[int]struct {
			result1 *models.Process
			result2 error
		})
	}
	fake.getProcessReturnsOnCall[i] = struct {
		result1 *models.Process
		result2 error
	}{result1, result2}
}

func (fake *FakeSlmpClientOperations) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMetadataMutex.RLock()
	defer fake.getMetadataMutex.RUnlock()
	fake.getServicesMutex.RLock()
	defer fake.getServicesMutex.RUnlock()
	fake.getServiceMutex.RLock()
	defer fake.getServiceMutex.RUnlock()
	fake.getServiceProcessesMutex.RLock()
	defer fake.getServiceProcessesMutex.RUnlock()
	fake.getServiceFilesMutex.RLock()
	defer fake.getServiceFilesMutex.RUnlock()
	fake.createServiceFileMutex.RLock()
	defer fake.createServiceFileMutex.RUnlock()
	fake.createServiceProcessMutex.RLock()
	defer fake.createServiceProcessMutex.RUnlock()
	fake.getServiceVersionsMutex.RLock()
	defer fake.getServiceVersionsMutex.RUnlock()
	fake.getProcessMutex.RLock()
	defer fake.getProcessMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSlmpClientOperations) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ slmpclient.SlmpClientOperations = new(FakeSlmpClientOperations)
