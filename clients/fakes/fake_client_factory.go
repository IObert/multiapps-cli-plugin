// This file was generated by counterfeiter
package fakes

import (
	"net/http"
	"sync"

	"github.com/SAP/cf-mta-plugin/clients"
	baseclient "github.com/SAP/cf-mta-plugin/clients/baseclient"
	restclient "github.com/SAP/cf-mta-plugin/clients/restclient"
	slmpclient "github.com/SAP/cf-mta-plugin/clients/slmpclient"
	slppclient "github.com/SAP/cf-mta-plugin/clients/slppclient"
)

type FakeClientFactory struct {
	NewSlmpClientStub        func(host, org, space string, rt http.RoundTripper, jar http.CookieJar, tokenfactory baseclient.TokenFactory) slmpclient.SlmpClientOperations
	newSlmpClientMutex       sync.RWMutex
	newSlmpClientArgsForCall []struct {
		host         string
		org          string
		space        string
		rt           http.RoundTripper
		jar          http.CookieJar
		tokenfactory baseclient.TokenFactory
	}
	newSlmpClientReturns struct {
		result1 slmpclient.SlmpClientOperations
	}
	NewSlppClientStub        func(host, org, space, serviceID, processID string, rt http.RoundTripper, jar http.CookieJar, tokenfactory baseclient.TokenFactory) slppclient.SlppClientOperations
	newSlppClientMutex       sync.RWMutex
	newSlppClientArgsForCall []struct {
		host         string
		org          string
		space        string
		serviceID    string
		processID    string
		rt           http.RoundTripper
		jar          http.CookieJar
		tokenfactory baseclient.TokenFactory
	}
	newSlppClientReturns struct {
		result1 slppclient.SlppClientOperations
	}
	NewRestClientStub        func(host, org, space string, rt http.RoundTripper, jar http.CookieJar, tokenfactory baseclient.TokenFactory) restclient.RestClientOperations
	newRestClientMutex       sync.RWMutex
	newRestClientArgsForCall []struct {
		host         string
		org          string
		space        string
		rt           http.RoundTripper
		jar          http.CookieJar
		tokenfactory baseclient.TokenFactory
	}
	newRestClientReturns struct {
		result1 restclient.RestClientOperations
	}
}

func (fake *FakeClientFactory) NewSlmpClient(host string, org string, space string, rt http.RoundTripper, jar http.CookieJar, tokenfactory baseclient.TokenFactory) slmpclient.SlmpClientOperations {
	fake.newSlmpClientMutex.Lock()
	fake.newSlmpClientArgsForCall = append(fake.newSlmpClientArgsForCall, struct {
		host         string
		org          string
		space        string
		rt           http.RoundTripper
		jar          http.CookieJar
		tokenfactory baseclient.TokenFactory
	}{host, org, space, rt, jar, tokenfactory})
	fake.newSlmpClientMutex.Unlock()
	if fake.NewSlmpClientStub != nil {
		return fake.NewSlmpClientStub(host, org, space, rt, jar, tokenfactory)
	} else {
		return fake.newSlmpClientReturns.result1
	}
}

func (fake *FakeClientFactory) NewSlmpClientCallCount() int {
	fake.newSlmpClientMutex.RLock()
	defer fake.newSlmpClientMutex.RUnlock()
	return len(fake.newSlmpClientArgsForCall)
}

func (fake *FakeClientFactory) NewSlmpClientArgsForCall(i int) (string, string, string, http.RoundTripper, http.CookieJar, baseclient.TokenFactory) {
	fake.newSlmpClientMutex.RLock()
	defer fake.newSlmpClientMutex.RUnlock()
	return fake.newSlmpClientArgsForCall[i].host, fake.newSlmpClientArgsForCall[i].org, fake.newSlmpClientArgsForCall[i].space, fake.newSlmpClientArgsForCall[i].rt, fake.newSlmpClientArgsForCall[i].jar, fake.newSlmpClientArgsForCall[i].tokenfactory
}

func (fake *FakeClientFactory) NewSlmpClientReturns(result1 slmpclient.SlmpClientOperations) {
	fake.NewSlmpClientStub = nil
	fake.newSlmpClientReturns = struct {
		result1 slmpclient.SlmpClientOperations
	}{result1}
}

func (fake *FakeClientFactory) NewSlppClient(host string, org string, space string, serviceID string, processID string, rt http.RoundTripper, jar http.CookieJar, tokenfactory baseclient.TokenFactory) slppclient.SlppClientOperations {
	fake.newSlppClientMutex.Lock()
	fake.newSlppClientArgsForCall = append(fake.newSlppClientArgsForCall, struct {
		host         string
		org          string
		space        string
		serviceID    string
		processID    string
		rt           http.RoundTripper
		jar          http.CookieJar
		tokenfactory baseclient.TokenFactory
	}{host, org, space, serviceID, processID, rt, jar, tokenfactory})
	fake.newSlppClientMutex.Unlock()
	if fake.NewSlppClientStub != nil {
		return fake.NewSlppClientStub(host, org, space, serviceID, processID, rt, jar, tokenfactory)
	} else {
		return fake.newSlppClientReturns.result1
	}
}

func (fake *FakeClientFactory) NewSlppClientCallCount() int {
	fake.newSlppClientMutex.RLock()
	defer fake.newSlppClientMutex.RUnlock()
	return len(fake.newSlppClientArgsForCall)
}

func (fake *FakeClientFactory) NewSlppClientArgsForCall(i int) (string, string, string, string, string, http.RoundTripper, http.CookieJar, baseclient.TokenFactory) {
	fake.newSlppClientMutex.RLock()
	defer fake.newSlppClientMutex.RUnlock()
	return fake.newSlppClientArgsForCall[i].host, fake.newSlppClientArgsForCall[i].org, fake.newSlppClientArgsForCall[i].space, fake.newSlppClientArgsForCall[i].serviceID, fake.newSlppClientArgsForCall[i].processID, fake.newSlppClientArgsForCall[i].rt, fake.newSlppClientArgsForCall[i].jar, fake.newSlppClientArgsForCall[i].tokenfactory
}

func (fake *FakeClientFactory) NewSlppClientReturns(result1 slppclient.SlppClientOperations) {
	fake.NewSlppClientStub = nil
	fake.newSlppClientReturns = struct {
		result1 slppclient.SlppClientOperations
	}{result1}
}

func (fake *FakeClientFactory) NewRestClient(host string, org string, space string, rt http.RoundTripper, jar http.CookieJar, tokenfactory baseclient.TokenFactory) restclient.RestClientOperations {
	fake.newRestClientMutex.Lock()
	fake.newRestClientArgsForCall = append(fake.newRestClientArgsForCall, struct {
		host         string
		org          string
		space        string
		rt           http.RoundTripper
		jar          http.CookieJar
		tokenfactory baseclient.TokenFactory
	}{host, org, space, rt, jar, tokenfactory})
	fake.newRestClientMutex.Unlock()
	if fake.NewRestClientStub != nil {
		return fake.NewRestClientStub(host, org, space, rt, jar, tokenfactory)
	} else {
		return fake.newRestClientReturns.result1
	}
}

func (fake *FakeClientFactory) NewRestClientCallCount() int {
	fake.newRestClientMutex.RLock()
	defer fake.newRestClientMutex.RUnlock()
	return len(fake.newRestClientArgsForCall)
}

func (fake *FakeClientFactory) NewRestClientArgsForCall(i int) (string, string, string, http.RoundTripper, http.CookieJar, baseclient.TokenFactory) {
	fake.newRestClientMutex.RLock()
	defer fake.newRestClientMutex.RUnlock()
	return fake.newRestClientArgsForCall[i].host, fake.newRestClientArgsForCall[i].org, fake.newRestClientArgsForCall[i].space, fake.newRestClientArgsForCall[i].rt, fake.newRestClientArgsForCall[i].jar, fake.newRestClientArgsForCall[i].tokenfactory
}

func (fake *FakeClientFactory) NewRestClientReturns(result1 restclient.RestClientOperations) {
	fake.NewRestClientStub = nil
	fake.newRestClientReturns = struct {
		result1 restclient.RestClientOperations
	}{result1}
}

var _ clients.ClientFactory = new(FakeClientFactory)
