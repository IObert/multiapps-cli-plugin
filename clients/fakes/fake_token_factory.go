// This file was generated by counterfeiter
package fakes

import (
	"sync"

	baseclient "github.com/SAP/cf-mta-plugin/clients/baseclient"

	"github.com/go-openapi/runtime"
)

type FakeTokenFactory struct {
	NewTokenStub        func() (runtime.ClientAuthInfoWriter, error)
	newTokenMutex       sync.RWMutex
	newTokenArgsForCall []struct{}
	newTokenReturns     struct {
		result1 runtime.ClientAuthInfoWriter
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTokenFactory) NewToken() (runtime.ClientAuthInfoWriter, error) {
	fake.newTokenMutex.Lock()
	fake.newTokenArgsForCall = append(fake.newTokenArgsForCall, struct{}{})
	fake.recordInvocation("NewToken", []interface{}{})
	fake.newTokenMutex.Unlock()
	if fake.NewTokenStub != nil {
		return fake.NewTokenStub()
	} else {
		return fake.newTokenReturns.result1, fake.newTokenReturns.result2
	}
}

func (fake *FakeTokenFactory) NewTokenCallCount() int {
	fake.newTokenMutex.RLock()
	defer fake.newTokenMutex.RUnlock()
	return len(fake.newTokenArgsForCall)
}

func (fake *FakeTokenFactory) NewTokenReturns(result1 runtime.ClientAuthInfoWriter, result2 error) {
	fake.NewTokenStub = nil
	fake.newTokenReturns = struct {
		result1 runtime.ClientAuthInfoWriter
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newTokenMutex.RLock()
	defer fake.newTokenMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeTokenFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ baseclient.TokenFactory = new(FakeTokenFactory)
